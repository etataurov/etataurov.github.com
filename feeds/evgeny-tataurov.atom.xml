<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>My blog - Evgeny Tataurov</title><link href="/" rel="alternate"></link><link href="/feeds/evgeny-tataurov.atom.xml" rel="self"></link><id>/</id><updated>2020-09-03T14:00:00+05:00</updated><entry><title>Jobfeed Widget</title><link href="/jobfeed-widget.html" rel="alternate"></link><published>2020-09-03T14:00:00+05:00</published><updated>2020-09-03T14:00:00+05:00</updated><author><name>Evgeny Tataurov</name></author><id>tag:None,2020-09-03:/jobfeed-widget.html</id><content type="html">&lt;p&gt;Check&lt;/p&gt;
&lt;p&gt;&lt;object width="300" height="350" type="image/svg+xml" data="https://widget.jobfeed.com/chart/4?country=gb&amp;language=en"&gt;&lt;/object&gt;&lt;/p&gt;</content><category term="Test"></category></entry><entry><title>"Git SVN"</title><link href="/git-svn.html" rel="alternate"></link><published>2012-11-30T15:49:00+06:00</published><updated>2012-11-30T15:49:00+06:00</updated><author><name>Evgeny Tataurov</name></author><id>tag:None,2012-11-30:/git-svn.html</id><summary type="html">&lt;p&gt;До работы в NAUMEN гитом я, можно сказать, не пользовался, svn-ом тем более. Со временем почувствовал уверенность в работе с гитом, уже легко делал коммиты, ребэйзы, мерджи. С svn-ом тоже пришлось столкнуться, так как некоторые вещи лежат в svn и переносить на git планов нет.&lt;br&gt;
Но была найдена удобная утилита …&lt;/p&gt;</summary><content type="html">&lt;p&gt;До работы в NAUMEN гитом я, можно сказать, не пользовался, svn-ом тем более. Со временем почувствовал уверенность в работе с гитом, уже легко делал коммиты, ребэйзы, мерджи. С svn-ом тоже пришлось столкнуться, так как некоторые вещи лежат в svn и переносить на git планов нет.&lt;br&gt;
Но была найдена удобная утилита git-svn, которая позволяля гитовскими командами работать с svn репозиториями. Конечно с удаленными ветками работать, просто как в гите нельзя, но вот локальные ветки - самые обычные как в гите.&lt;br&gt;
Одна небольшая проблема только в том, что svn, как я понимаю, не дружит с нелинейной историей, а я часто работаю одновременно в различных локальных ветках, а главная ветка в это время тоже обновляется. В документации git-svn не советуют пользоваться merge, а советуют сделать патчи для каждого коммита. И в таком случае если захочется смержить ветку с какой-то новой фичей с мастером, то необходимо сделать&lt;br&gt;
&lt;strong&gt;Добавить все изменения из мастера в текущую ветку&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;git rebase master&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Сформировать патчи для всех коммитов, которых нет в мастере&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;git format-patch master&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Перейти в master&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;git checkout master&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Применить нужные патчи&lt;/strong&gt;&lt;br&gt;
Раньше я делал это вручную, т.е. для каждого патча делал команду&lt;br&gt;
&lt;code&gt;git apply filename.patch&lt;/code&gt;&lt;br&gt;
При этом все изменения не коммитятся, но становятся в состояние staged for commit и потом надо вручную коммитить.&lt;br&gt;
Можно воспользоваться командой&lt;br&gt;
&lt;code&gt;git am filename.patch&lt;/code&gt;&lt;br&gt;
Но при этом дата коммита останется той, что была у коммита из которого сформирован это патч, что для линейной истории, которая нам нужна, совсем не хорошо.&lt;br&gt;
&lt;code&gt;git am filename.patch  --ignore-date&lt;/code&gt;&lt;br&gt;
Такая команда позвонил сразу коммитит изменения патча и игнорирует дату патча, ставит текущую дату.&lt;br&gt;
С помощью следующей команды можно применить все патчи из текущей папки с игнорированием ошибок пробелов и с игнорированием даты&lt;br&gt;
&lt;code&gt;git am *.patch  --ignore-date --ignore-whitespace --ignore-space-change&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Вот такой первый пост.&lt;/p&gt;</content><category term="Git"></category><category term="git"></category><category term="svn"></category><category term="naumen"></category></entry></feed>